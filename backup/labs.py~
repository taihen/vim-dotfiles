# -*- coding: utf-8 -*-

import os
from boto import ec2
from flask import Flask, request, Response, render_template, redirect, \
        url_for, flash, session, abort, send_from_directory
from flask_login import LoginManager, current_user, login_required, \
        login_user, logout_user, UserMixin, AnonymousUser, confirm_login, \
        fresh_login_required

# Variables
AWS_ACCESS_KEY_ID = 'XXXXXXXXXXXXXXXXXX'
AWS_SECRET_ACCESS_KEY = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'

# config
app = Flask(__name__)
app.config.from_object(__name__)
app.config.update(
    DEBUG = True,
    SECRET_KEY = 'secret_xxx'
)

# flask-login
login_manager = LoginManager()
login_manager.setup_app(app)
login_manager.login_view = "login"
login_manager.session_protection = "strong"

# simple user model
class User(UserMixin):
    def __init__(self, id):
        self.id = id
        self.name = "user" + str(id)
        self.password = self.name + "_secret"
    def __repr__(self):
        return "%d/%s/%s" % (self.id, self.name, self.password)

# create some users with ids 0 to 6 where 0 is a admin
users = [User(id) for id in range(0, 26)]

# somewhere to login
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        if password == username + "_secret":
            id = username.split('user')[1]
            user = User(id)
            login_user(user)
            return redirect(request.args.get("next") or url_for("index"))
        else:
            return abort(401)
    else:
        return render_template("login.html")

# somewhere to logout
@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("index"))

# callback to relaad the user object
@login_manager.user_loader
def load_user(userid):
    return User(userid)

@app.errorhandler(401)
def e401(e):
    return render_template("401.html")

@app.errorhandler(403)
def e403(e):
    return render_template("403.html")

@app.errorhandler(404)
def e404(error):
    return render_template("404.html")

@app.route("/")
def index():
    return render_template("welcome.html")

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'),
                               'favicon.ico', mimetype='image/vnd.microsoft.icon')

@app.route("/about")
def about():
    return render_template("about.html")

@app.route("/contact")
def contact():
    return render_template("contact.html")

@app.route("/account")
def account():
    return render_template("account.html")

@app.route("/ipv6")
@login_required
def ipv6():
    if current_user.name != "user0":
        return render_template("ipv6_" + current_user.name + ".html")
    else:
        return render_template("notavailable.html")

@app.route("/ipv6/survey")
@login_required
def ipv6_survey():
    return render_template("ipv6_survey.html")

@app.route("/admin/<adminurl>")
@login_required
def admin(adminurl):
    if current_user.name == "user0":
        url = "%s" % adminurl
        return render_template("admin_" + url + ".html")
    else:
        return render_template("403.html")

@app.route("/user/<username>")
def show_user_profile(username):
    return "User %s" % username

if __name__ == "__main__":
    app.run(host='127.0.0.1', debug="True")
